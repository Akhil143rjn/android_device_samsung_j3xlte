diff --git a/init/builtins.cpp b/init/builtins.cpp
index bb1b5ea..8cbd9d4 100644
--- a/init/builtins.cpp
+++ b/init/builtins.cpp
@@ -860,6 +860,15 @@ static int do_wait_for_prop(const std::vector<std::string>& args) {
     return 0;
 }
 
+static int do_pipe(const std::vector<std::string>& args) {
+    mode_t mode = get_mode(args[1].c_str());
+    if (mkfifo(args[2].c_str(), mode) < 0) {
+        LOG(ERROR) << "peter do pipe error haha";
+        return -errno;
+    }
+    return 0;
+}
+
 /*
  * Callback to make a directory from the ext4 code
  */
@@ -954,6 +963,7 @@ const BuiltinFunctionMap::Map& BuiltinFunctionMap::map() const {
         {"verity_update_state",     {0,     0,    do_verity_update_state}},
         {"wait",                    {1,     2,    do_wait}},
         {"wait_for_prop",           {2,     2,    do_wait_for_prop}},
+        {"pipe",                    {1,     2,    do_pipe}},
         {"write",                   {2,     2,    do_write}},
     };
     // clang-format on
diff --git a/libion/Android.bp b/libion/Android.bp
deleted file mode 100644
index 6d9fae0..0000000
--- a/libion/Android.bp
+++ /dev/null
@@ -1,30 +0,0 @@
-
-cc_library {
-    name: "libion",
-    vendor_available: true,
-    vndk: {
-        enabled: true,
-        support_system_process: true,
-    },
-    srcs: ["ion.c"],
-    shared_libs: ["liblog"],
-    local_include_dirs: [
-        "include",
-        "kernel-headers",
-    ],
-    export_include_dirs: [
-        "include",
-        "kernel-headers",
-    ],
-    cflags: ["-Werror"],
-}
-
-cc_binary {
-    name: "iontest",
-    srcs: ["ion_test.c"],
-    static_libs: ["libion"],
-    shared_libs: ["liblog"],
-    cflags: ["-Werror"],
-}
-
-subdirs = ["tests"]
diff --git a/libion/Android.mk b/libion/Android.mk
new file mode 100644
index 0000000..8263c7b
--- /dev/null
+++ b/libion/Android.mk
@@ -0,0 +1,24 @@
+LOCAL_PATH := $(call my-dir)
+
+include $(CLEAR_VARS)
+LOCAL_SRC_FILES := ion.c
+LOCAL_MODULE := libion
+LOCAL_MODULE_TAGS := optional
+LOCAL_SHARED_LIBRARIES := liblog libcutils
+LOCAL_C_INCLUDES := $(LOCAL_PATH)/include $(TARGET_OUT_INTERMEDIATES)/KERNEL_OBJ/usr/include/video
+LOCAL_EXPORT_C_INCLUDE_DIRS := $(LOCAL_PATH)/include $(TARGET_OUT_INTERMEDIATES)/KERNEL_OBJ/usr/include/video
+LOCAL_ADDITIONAL_DEPENDENCIES := $(TARGET_OUT_INTERMEDIATES)/KERNEL_OBJ/usr
+LOCAL_CFLAGS := -Werror
+include $(BUILD_SHARED_LIBRARY)
+
+include $(CLEAR_VARS)
+LOCAL_SRC_FILES := ion.c ion_test.c
+LOCAL_MODULE := iontest
+LOCAL_MODULE_TAGS := optional tests
+LOCAL_C_INCLUDES := $(LOCAL_PATH)/include $(TARGET_OUT_INTERMEDIATES)/KERNEL_OBJ/usr/include/video
+LOCAL_ADDITIONAL_DEPENDENCIES := $(TARGET_OUT_INTERMEDIATES)/KERNEL_OBJ/usr
+LOCAL_SHARED_LIBRARIES := liblog libcutils
+LOCAL_CFLAGS := -Werror
+include $(BUILD_EXECUTABLE)
+
+include $(call first-makefiles-under,$(LOCAL_PATH))
diff --git a/libion/include/ion/ion.h b/libion/include/ion/ion.h
index f47793d..d276b16 100644
--- a/libion/include/ion/ion.h
+++ b/libion/include/ion/ion.h
@@ -35,6 +35,7 @@ int ion_alloc(int fd, size_t len, size_t align, unsigned int heap_mask,
 int ion_alloc_fd(int fd, size_t len, size_t align, unsigned int heap_mask,
               unsigned int flags, int *handle_fd);
 int ion_sync_fd(int fd, int handle_fd);
+int ion_invalidate_fd(int fd, int handle_fd);
 int ion_free(int fd, ion_user_handle_t handle);
 int ion_map(int fd, ion_user_handle_t handle, size_t length, int prot,
             int flags, off_t offset, unsigned char **ptr, int *map_fd);
diff --git a/libion/ion.c b/libion/ion.c
index 9aaa6f2..51f2a03 100644
--- a/libion/ion.c
+++ b/libion/ion.c
@@ -32,6 +32,11 @@
 #include <ion/ion.h>
 #include <log/log.h>
 
+struct file;
+
+#include <stdbool.h>
+#include "ion_sprd.h"
+
 int ion_open()
 {
     int fd = open("/dev/ion", O_RDONLY | O_CLOEXEC);
@@ -170,6 +175,16 @@ int ion_import(int fd, int share_fd, ion_user_handle_t *handle)
     return ret;
 }
 
+int ion_invalidate_fd(int fd, int handle_fd)
+{
+    struct ion_custom_data custom_data;
+    if (handle_fd < 0)
+        return -EINVAL;
+    custom_data.cmd = ION_SPRD_CUSTOM_INVALIDATE;
+    custom_data.arg = (unsigned long)handle_fd;
+    return ioctl(fd, ION_IOC_CUSTOM, &custom_data);
+}
+
 int ion_sync_fd(int fd, int handle_fd)
 {
     struct ion_fd_data data = {
diff --git a/libsystem/include/system/camera.h b/libsystem/include/system/camera.h
index 6de0203..695ac07 100644
--- a/libsystem/include/system/camera.h
+++ b/libsystem/include/system/camera.h
@@ -201,6 +201,10 @@ enum {
      * of SW_READ_OFTEN.
      */
     CAMERA_CMD_SET_VIDEO_FORMAT = 11,
+    CAMERA_CMD_SET_FLIP_ON = 12,
+    MULTI_FRAME_SHOT_START            = 1261,
+    AUTO_LOW_LIGHT_SET                = 1351,
+    HDR_PICTURE_MODE_CHANGE           = 1273,
 
     CAMERA_CMD_VENDOR_START = 20,
     /**
@@ -342,6 +346,11 @@ typedef struct camera_frame_metadata {
      * An array of the detected faces. The length is number_of_faces.
      */
     camera_face_t *faces;
+
+    /**
+     * Value for low light condition
+     */
+    int32_t light_condition;
 } camera_frame_metadata_t;
 
 __END_DECLS
